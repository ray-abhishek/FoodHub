name: Run Tests

# Run this workflow every time a new commit pushed to your repository
on: push

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  build_server:
    # Name the Job
    name: Build Server
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.6.9]

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
        - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      rabbitmq:
        image: rabbitmq:3.8.9
        env:
          RABBITMQ_DEFAULT_USER: urbanpiper
          RABBITMQ_DEFAULT_PASS: urbanpiper
          RABBITMQ_DEFAULT_VHOST: uphost
        ports:
        - 5672:5672
        options: -e RABBITMQ_ERLANG_COOKIE="COOKIE" -e RABBITMQ_DEFAULT_USER="urbanpiper" -e RABBITMQ_DEFAULT_PASS="urbanpiper" -e RABBITMQ_DEFAULT_VHOST="uphost"
          --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      
      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 -uroot -ppassword -e "SHOW DATABASES"
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: foodhub/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  server:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Run Tests
        env:
          IN_DOCKER_CONTAINER: false
          IN_CI_ENV: true
          CI_DB_NAME: tests
          CI_DB_USER: root
          CI_DB_PASS: password
          CI_DB_HOST: 127.0.0.1
          CI_DB_PORT: 3306
        run: 
          docker ps